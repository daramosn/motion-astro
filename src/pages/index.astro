---
import Layout from '../layouts/Layout.astro'

import floating from '../assets/floating.webp'
import sticky from '../assets/sticky.webp'
import infiniteText from '../assets/infinite-text.webp'
import mask from '../assets/mask.webp'

const projects = [
  {
    url: '/infinite-text',
    name: 'Infinite text',
    thumbnail: infiniteText.src,
    tags: ['Vue', 'GSAP'],
    mobile: true
  },
  {
    url: '/floating-gallery',
    name: 'Floating gallery',
    thumbnail: floating.src,
    tags: ['Vue'],
    mobile: false
  },
  {
    url: '/sticky-sections',
    name: 'Sticky sections',
    thumbnail: sticky.src,
    tags: ['Vue', 'GSAP'],
    mobile: true
  },
  {
    url: '/mask-cursor',
    name: 'Mask cursor',
    thumbnail: mask.src,
    tags: ['Astro', 'Motion one'],
    mobile: false
  }
  // {
  //   url: '/magnetic-element',
  //   name: 'Magnetic element',
  //   thumbnail: mask.src,
  //   tags: ['React', 'Framer motion'],
  //   mobile: false
  // }
]
---

<Layout title="Motion projects gallery">
  <header>
    <h1>Motion projects gallery</h1>
  </header>
  <main>
    <ul class="projects">
      {
        projects.map((project) => (
          <li class="project">
            <a class="link" href={project.url}>
              <span class="name">{project.name}</span>
              <ul class="tags">
                {project.tags.map((tag) => (
                  <li>{tag}</li>
                ))}
                {!project.mobile && (
                  <li
                    class="desktop"
                    title="Works only with mouse position"
                    style={`transform: translate(-50%,-50%) rotate(-${Math.random() * 30 + 10}deg);`}
                  >
                    Desktop only
                  </li>
                )}
              </ul>
            </a>
          </li>
        ))
      }
    </ul>
    <div class="float">
      <div class="container">
        {
          projects.map((project) => (
            <img src={project.thumbnail} alt={project.name + ' demo screenshot'} />
          ))
        }
      </div>
    </div>
  </main>
</Layout>

<style>
  @font-face {
    font-family: 'Pacifico';
    font-style: normal;
    font-display: swap;
    font-weight: 400;
    src:
      url(https://cdn.jsdelivr.net/fontsource/fonts/pacifico@latest/latin-400-normal.woff2)
        format('woff2'),
      url(https://cdn.jsdelivr.net/fontsource/fonts/pacifico@latest/latin-400-normal.woff)
        format('woff');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
      U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,
      U+2215, U+FEFF, U+FFFD;
  }

  body {
    background-color: rgb(251, 254, 255);
    /* background-color: #1e1e1e; */
    /* background-color: #1b1b1d; */
    /* background-color: #121212; */

    color: black;
    /* color: #ffffff; */
    /* color: #e0e0e0; */
    /* color: blue; */

    --accent-color: #2544ee;
    /* --accent-color: #3b82f6; */
    /* --accent-color: #6366f1; */
    /* --accent-color: #10b981; */

    &[data-theme='light'] {
      background-color: #121212;
      color: #ffffff;
      --accent-color: #10b981;
    }
  }

  /* body::before {
    --size: 45px;
    --line: color-mix(in lch, currentColor, transparent 90%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background:
      linear-gradient(90deg, var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% / var(--size)
        var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  } */

  header {
    padding: 32px max(32px, calc((100% - var(--body)) / 2));
    h1 {
      font-size: customClamp(32px, 64px, 512px, 1400px);
      text-align: center;
      font-family: 'Pacifico';
      text-transform: uppercase;
      text-transform: lowercase;
      text-transform: capitalize;
    }
  }
  main {
    position: relative;
    margin: 64px max(32px, calc((100% - var(--body)) / 2));
    .projects {
      display: grid;
      .project {
        border-bottom: 1px solid currentColor;
        &:first-child {
          border-top: 1px solid currentColor;
        }
      }
      .link {
        display: flex;
        justify-content: space-between;
        padding: 48px 32px;
        position: relative;
        color: color-mix(in srgb, currentColor, transparent 30%);
        .name {
          font-size: customClamp(24px, 32px, 536px, 1200px);
          transition: color ease-out 0.2s;
        }
        .tags {
          width: 256px;
          display: flex;
          justify-content: end;
          align-items: center;
          flex-wrap: wrap;
          column-gap: 24px;
          li {
            font-size: 14px;
          }
        }
        .tags .desktop {
          display: none;
        }
        &::before {
          position: absolute;
          content: '';
          height: 0%;
          width: 100%;
          top: 0;
          left: 0;
          background-color: var(--accent-color);
          z-index: -1;
          transition: all 0.15s ease-out;
        }
      }
      .link:hover {
        color: white;
        &::before {
          height: 100%;
        }
      }
    }
  }
  main:hover .float {
    scale: 1;
    opacity: 1;
  }
  .float {
    pointer-events: none;
    height: 230px;
    width: 300px;
    background-color: rgb(247, 247, 247);
    overflow: clip;
    position: fixed;

    top: 40%;
    left: 40%;

    transition:
      all 0.25s ease-out,
      opacity 0.25s ease-out,
      scale 0.2s ease-out;
    scale: 0;
    opacity: 0;

    .container {
      height: 100%;
      width: 100%;
      transition: all 0.2s ease-in;
      /* transition: all 0.4s cubic-bezier(0.77, 0, 0.18, 1); */
    }

    img {
      padding: 16px;
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
  }

  @media (width < 768px) {
    main .tags .desktop {
      display: block;
      position: absolute;
      z-index: 3;
      top: 50%;
      left: 55%;
      transform: translate(-50%, -50%) rotate(-20deg);
      padding: 8px 16px;
      border-radius: 50px;
      color: white;
      background-color: rgb(238 41 41);
      box-shadow: 0px 10px 15px -3px rgba(0, 0, 0, 0.25);
    }
    .float {
      display: none;
    }
  }
  @media (width < 576px) {
    main .link {
      flex-direction: column;
      gap: 8px;

      .tags {
        width: auto;
        justify-content: start;

        .desktop {
          text-wrap: nowrap;
          left: 75%;
        }
      }
    }
  }
</style>

<script>
  if (!window.matchMedia('(width < 768px)').matches) {
    const $floatInner = document.body.querySelector('.float .container') as HTMLElement
    const $float = document.body.querySelector('.float') as HTMLElement
    const $links = document.body.querySelectorAll(
      'main .projects .project'
    ) as NodeListOf<HTMLElement>

    $links.forEach((link, index) => {
      link.addEventListener('mouseenter', () => {
        $floatInner.style.transform = `translateY(${-index * 100}%)`
      })
    })

    let requestAnimationFrameId = -1
    let xMove = 0
    let yMove = 0
    const speed = 1
    const inertia = 1 // inertia/easing

    const $main = document.body.querySelector('main') as HTMLElement
    $main.addEventListener('mouseenter', mouseEnter, { once: true })

    function mouseEnter() {
      const lerp = (start: number, end: number, amount: number) => {
        return start * (1 - amount) + end * amount
      }
      const animation = () => {
        xMove = lerp(0, xMove, inertia)
        yMove = lerp(0, yMove, inertia)

        $float.style.transform = `translateX(${xMove * 0.2 - $float.getBoundingClientRect().width / 2}px)`
        // $float.style.left = xMove - $float.getBoundingClientRect().width / 2 + 'px'
        $float.style.top = yMove - $float.getBoundingClientRect().height / 2 + 'px'

        if (Math.abs(xMove) > 0.01 || Math.abs(yMove) > 0.01) {
          requestAnimationFrame(animation)
        } else {
          cancelAnimationFrame(requestAnimationFrameId)
          requestAnimationFrameId = -1
        }
      }
      const mouseMoveHandler = (e: MouseEvent) => {
        const { x, y } = e
        xMove = x * speed
        yMove = y * speed

        if (requestAnimationFrameId === -1) {
          requestAnimationFrameId = requestAnimationFrame(animation)
        }
      }

      $main.addEventListener('mousemove', mouseMoveHandler)
      $main.addEventListener('mouseleave', mouseMoveHandler)
    }
  }
</script>
